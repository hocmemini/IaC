name: 'Terraform Deploy'

on:
  push:
    branches:
      - main
    paths:
      - 'aws/terraform/**'
      - '.github/workflows/main.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'aws/terraform/**'
      - '.github/workflows/main.yml'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    env:
      AWS_REGION: us-east-1
      TF_INPUT: false
      TF_IN_AUTOMATION: true
      
    defaults:
      run:
        working-directory: ./aws/terraform    
        shell: bash

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Terraform Cache
        uses: actions/cache@v4
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/aws/terraform/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: true

      - name: Verify AWS Credentials
        run: aws sts get-caller-identity

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.0"
          terraform_wrapper: false

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -diff -recursive
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: |
          terraform init -input=false -upgrade
          terraform workspace select prod || terraform workspace new prod

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Check for Terraform Changes
        id: changes
        if: github.event_name == 'pull_request'
        run: |
          git fetch origin ${{ github.base_ref }}
          if ! git diff --quiet origin/${{ github.base_ref }} HEAD -- ./aws/terraform/; then
            echo "changes=true" >> $GITHUB_OUTPUT
          else
            echo "changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request' && steps.changes.outputs.changes == 'true'
        run: |
          terraform plan -no-color -input=false -out=tfplan || exit 1
          terraform show -no-color tfplan > plan.txt

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && steps.changes.outputs.changes == 'true'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('aws/terraform/plan.txt', 'utf8');
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform\n
            ${plan}
            \`\`\`
            
            </details>
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          terraform plan -no-color -input=false -out=tfplan || exit 1
          terraform apply -no-color -auto-approve tfplan || exit 1

      - name: Notify on Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® Terraform deployment failed on ${process.env.GITHUB_REF}`,
              body: `Workflow run failed: [View run](https://github.com/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})`
            }
            await github.rest.issues.create(issue)
