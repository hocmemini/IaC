name: 'Terraform Deploy'

on:
  push:
    branches:
      - main
    paths:
      - 'aws/terraform/**'
      - '.github/workflows/main.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'aws/terraform/**'
      - '.github/workflows/main.yml'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    env:
      AWS_REGION: us-east-1
      TF_INPUT: false
      TF_IN_AUTOMATION: true
      
    defaults:
      run:
        working-directory: ./aws/terraform
        shell: bash

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: true

      - name: Verify AWS Credentials
        run: |
          aws sts get-caller-identity
          echo "AWS Credentials verified successfully"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.0"
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        run: terraform init -input=false -upgrade

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -input=false -out=tfplan || exit 1
          echo "Terraform plan completed successfully"

      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          terraform apply -no-color -auto-approve tfplan || exit 1
          echo "Terraform apply completed successfully"

      - name: Debug - List All Resources
        run: |
          echo "Listing EC2 Instances:"
          aws ec2 describe-instances --query 'Reservations[*].Instances[*].[InstanceId,Tags[?Key==`Name`].Value|[0],State.Name,PublicIpAddress]' --output table
          
          echo "Listing Key Pairs:"
          aws ec2 describe-key-pairs --query 'KeyPairs[*].[KeyName,KeyPairId]' --output table

      - name: Retrieve and Save Key Pair
        if: success() && github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          # Get the private key content from Terraform state
          echo "Retrieving private key from state..."
          PRIVATE_KEY=$(terraform show -json | jq -r '.values.root_module.resources[] | select(.type == "tls_private_key") | .values.private_key_pem')
          
          if [ ! -z "$PRIVATE_KEY" ]; then
            echo "Private key retrieved successfully"
            # Save to file
            echo "$PRIVATE_KEY" > private_key.pem
            chmod 600 private_key.pem
            
            # Get instance ID
            INSTANCE_ID=$(terraform output -raw instance_id || aws ec2 describe-instances --filters "Name=tag:Name,Values=windows-server" --query "Reservations[].Instances[?State.Name=='running'].[InstanceId]" --output text)
            
            if [ ! -z "$INSTANCE_ID" ]; then
              echo "Instance ID found: $INSTANCE_ID"
              
              # Get Windows password
              echo "Retrieving Windows password..."
              PASSWORD=$(aws ec2 get-password-data --instance-id $INSTANCE_ID --priv-key-file private_key.pem --query 'PasswordData' --output text)
              
              if [ ! -z "$PASSWORD" ]; then
                echo "Password retrieved successfully"
                
                # Create connection details
                cat << EOF > connection_details.txt
                Instance ID: $INSTANCE_ID
                Public IP: $(terraform output -raw instance_public_ip || aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[].Instances[].PublicIpAddress' --output text)
                Username: Administrator
                Password: $PASSWORD
                
                RDP Connection Details saved!
                EOF
                
                # Save as artifact
                mkdir -p ./artifacts
                cp connection_details.txt ./artifacts/
                cp private_key.pem ./artifacts/
              else
                echo "Password not available yet. This is normal for new instances. Please wait a few minutes and try again."
              fi
            else
              echo "No running instance found"
            fi
          else
            echo "Private key not found in state"
          fi

      - name: Upload Connection Details
        if: success() && github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: windows-server-connection-details
          path: |
            ./aws/terraform/artifacts/connection_details.txt
            ./aws/terraform/artifacts/private_key.pem
          retention-days: 1

      - name: Create Debug Issue on Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üîç Debug Required: Terraform deployment failed on ${process.env.GITHUB_REF}`,
              body: `Deployment failed. Debug information:
              
              Workflow: ${process.env.GITHUB_WORKFLOW}
              Run ID: ${process.env.GITHUB_RUN_ID}
              Run Number: ${process.env.GITHUB_RUN_NUMBER}
              Action: ${process.env.GITHUB_ACTION}
              Event: ${process.env.GITHUB_EVENT_NAME}
              
              [View run details](https://github.com/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})`
            }
            await github.rest.issues.create(issue)

      - name: Post Success Comment
        if: success() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const comment = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `‚úÖ Terraform deployment validated successfully!
              
              You can find connection details in the workflow artifacts.
              Download the artifact named 'windows-server-connection-details' from the Actions tab.`
            }
            await github.rest.issues.createComment(comment)
